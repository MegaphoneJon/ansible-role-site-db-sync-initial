---
- name: Set some initial facts
  set_fact:
    # sync_type not used here, it's present tgo pave the way for remerging with site-db-sync
    sync_type: "{{ sync_type | default('quick', true) }}"
    client: "{{ short_name | default(client, true) }}"

- name: Set the repo name and passphase
  set_fact:
    repo_name: "{{ canonical_server_client + '-' + canonical_hostname }}"
    passphrase: "{{ lookup('community.general.passwordstore', canonical_server_client + '/' + canonical_hostname + '/borg/remote') }}"
  when: db_sync_strategy == 'rsyncnet' and not monitor_backupninja|bool

- name: repo name and passhphrase is different when we do site-level backups
  set_fact:
    repo_name: "{{ client + '-' + canonical_hostname + '-' + canonical_bare_url }}"
    passphrase: "{{ lookup('community.general.passwordstore', canonical_server_client + '/' + canonical_hostname + '/' + canonical_bare_url + '/borg/remote') }}"
  when: db_sync_strategy == 'rsyncnet' and monitor_backupninja|bool

- name: create a list of db names
  set_fact:
    canonical_db_names:
      - "{{ canonical_cms_db_name }}"
      - "{{ canonical_crm_db_name }}"
      - "{{ canonical_crm_logging_db_name | default(canonical_crm_db_name, true) }}"
    db_names:
      - "{{ cms_db_name }}"
      - "{{ crm_db_name }}"
      - "{{ crm_logging_db_name | default(crm_db_name, true) }}"

- name: create a list of unique db names, removing blanks
  set_fact:
    canonical_db_names_unique: "{{ canonical_db_names | select() | unique }}"
    db_names_unique: "{{ db_names | select() | unique }}"

- name: Create sql-dumps folder
  file:
    owner: "{{ run_as_user }}"
    group: "{{ run_as_user }}"
    path: "{{ sqldumps_path }}"
    state: directory
    mode: 02770

# MySQL restore
- name: Check if db dump files already exist
  stat:
    path: "{{ sqldumps_path }}/{{ canonical_cms_db_name }}.sql"
  register: db_dump
  become_user: "{{ run_as_user }}"
  become: yes

# Return yes when we FAIL the assertion, meaning "restore a db backup".
- name: Update the dump if a canonical db exists unless a dump already exists and is < 24hrs old
  assert:
    that:
      - "(canonical_hostname is none and db_sync_strategy != 'pantheon') or (db_dump.stat.exists == true and (ansible_date_time.epoch|int - db_dump.stat.mtime) < (60 * 60 * 24))"
    fail_msg: "yes"
  failed_when: false
  register: acquire_db_backup

# Acquire a backup from rsync.net
- block:
  - name: Get the latest backup archive name
    shell: borg list --last 1 --short --remote-path borg12 {{ rsyncnet_user }}@{{ rsyncnet_server }}:{{ repo_name }}
    environment:
      BORG_PASSPHRASE: "{{ passphrase }}"
    register: archive_name
    changed_when: false


  # Download the borg backup of the db dump if we need an update and the borg backup exists.
  # Also very ugly.  Borg doesn't allow specifying a destination path, so we use strip-components, but need to figure out how many components the path has.
  - name: Get depth of backup path.
    set_fact:
      path_depth: "{{ canonical_database_backup_path | default('var/backups/mysql/sqldump',true) | regex_replace('[^\/]', '') | count + 1 }}"

  - name: Download the latest copy of the database
    shell: borg extract --strip-components {{ path_depth }} --remote-path borg12 {{ rsyncnet_user }}@{{ rsyncnet_server }}:{{ repo_name }}::{{ archive_name.stdout }} {{ canonical_database_backup_path | default("var/backups/mysql/sqldump",true) }}/{{ db_name }}.sql.gz
    args:
      chdir: "{{ sqldumps_path }}"
    environment:
      BORG_PASSPHRASE: "{{ passphrase }}"
    with_items: "{{ canonical_db_names_unique }}"
    register: db_downloaded
    loop_control:
      loop_var: db_name

  - name: Decompress the db backups
    shell: gunzip --force {{ item }}.sql.gz
    args:
      chdir: "{{ sqldumps_path }}"
    with_items: "{{ canonical_db_names_unique }}"
    when: acquire_db_backup.msg == "yes"
  when: acquire_db_backup.msg == "yes" and db_sync_strategy == 'rsyncnet'
  become: yes
  become_user: root

# Acquire a backup from a mysqldump
- block:
  - name: Make a db backup
    mysql_db:
      state: dump
      login_user: "{{ canonical_db_user }}"
      login_password: "{{ lookup('community.general.passwordstore', canonical_server_client + '/' + canonical_hostname + '/' + canonical_bare_url + '/mysql') }}"
      login_host: "{{ remote_db_host }}"
      name: "{{ db_name }}"
      target: "/tmp/{{ db_name }}.sql"
      single_transaction: true
    with_items: "{{ canonical_db_names_unique }}"
    loop_control:
      loop_var: db_name

  - name: fetch db backups
    fetch:
      src: "/tmp/{{ db_name }}.sql"
      dest: "{{ sqldumps_path }}/{{ db_name }}.sql"
      flat: yes
    with_items: "{{ canonical_db_names_unique }}"
    become_user: "{{ run_as_user }}"
    loop_control:
      loop_var: db_name

  when: acquire_db_backup.msg == "yes" and db_sync_strategy == 'livedump'
  delegate_to: "{{ canonical_server }}"
  remote_user: "{{ canonical_run_as_user }}"
  become: no

# Acquire a backup from Pantheon
- block:
  - name: Log in to Terminus
    command: "terminus auth:login --machine-token={{ lookup('community.general.passwordstore', client + '/pantheonmachinetoken') }}"

  - name: Create a Pantheon backup
    command: "terminus backup:create {{ pantheon_site_code }}.live --element=db --keep-for=1"

  - name: Retrieve the Pantheon backup
    command: "terminus backup:get {{ pantheon_site_code }}.live --element=db --to={{ sqldumps_path }}/{{ canonical_cms_db_name }}.sql.gz"

  - name: Decompress the db backup
    shell: gunzip --force {{ canonical_cms_db_name }}.sql.gz
    args:
      chdir: "{{ sqldumps_path }}"
  when: acquire_db_backup.msg == "yes" and db_sync_strategy == 'pantheon'
  become_user: "{{ run_as_user }}"

- name: Set owner/group for db dumps
  ansible.builtin.file:
    path: "{{ sqldumps_path }}/{{ db_name }}.sql"
    owner: "{{ run_as_user }}"
    group: "{{ run_as_user }}"
    mode: 0660
  with_items: "{{ canonical_db_names_unique }}"
  become: yes
  become_user: root
  loop_control:
    loop_var: db_name

- name: Remove trigger definers from Civi db
  command: perl -pi -e 's#\/\*\!5001. DEFINER=`.*`@`.*?\*\/##g' {{ canonical_crm_db_name }}.sql
  args:
    chdir: "{{ sqldumps_path }}"
  when: civicrm == 'Yes'

- name: Remove function definers from Civi db
  command: perl -pi -e 's/CREATE DEFINER.*FUNCTION/CREATE FUNCTION/g' {{ canonical_crm_db_name }}.sql
  args:
    chdir: "{{ sqldumps_path }}"
  when: civicrm == 'Yes'

- name: Fix logging db triggers when using a separate db
  command: perl -pi -e 's/{{ canonical_crm_logging_db_name }}/{{ crm_logging_db_name }}/g' {{ canonical_crm_db_name }}.sql
  args:
    chdir: "{{ sqldumps_path }}"
  when: canonical_crm_logging_db_name is not none and civicrm == 'Yes'

- name: Import the databases
  mysql_db:
    name: "{{ item.1 }}"
    target: "{{ sqldumps_path }}/{{ item.0 }}.sql"
    state: import
    login_user: "{{ db_user }}"
    login_password: "{{ lookup('community.general.passwordstore', client + '/' + hostname + '/' + bare_url + '/mysql') }}"
  when: item.1 is defined and canonical_primary_url
  with_together:
   - "{{ canonical_db_names_unique }}"
   - "{{ db_names_unique }}"

- name: Turn off Nagios cron check on dev/test sites
  command: "drush --root={{ webroot }} -y vset nagios_func_cron 0"
  when: cms == 'Drupal' and env != 'Live'

- name: Fix wp-load setting
  command: wp eval '$c=[civi_wp()->admin, "add_wpload_setting"]; if (is_callable($c)) $c();' --path={{ webroot }}
  when: cms == 'WordPress' and civicrm == 'Yes'
  become_user: "{{ run_as_user }}"
  ignore_errors: yes

- name: search/replace in wp_blogs for multi-site
  command: "wp search-replace {{ canonical_bare_url }} {{ bare_url }} wp_blogs --path={{ webroot }}"
  become_user: "{{ run_as_user }}"
  when: cms == 'WordPress'
  ignore_errors: yes

- name: Do a search/replace for the primary URL
  command: "wp search-replace {{ canonical_primary_url }} {{ primary_url }} --path={{ webroot }}"
  become_user: "{{ run_as_user }}"
  when: cms == 'WordPress'
  ignore_errors: yes

- name: Disable wp plugins that screw with login (on dev)
  command: wp plugin deactivate advanced-nocaptcha-recaptcha ithemes-security-pro --path={{ webroot }}
  become_user: "{{ run_as_user }}"
  failed_when: false
  when: cms == 'WordPress' and env == 'Dev'
